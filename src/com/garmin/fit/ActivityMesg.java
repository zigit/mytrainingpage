////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.0Release
// Tag = $Name: AKW1_000 $
////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;


public class ActivityMesg extends Mesg implements MesgWithEvent {


   public ActivityMesg() {
      super(Factory.createMesg(MesgNum.ACTIVITY));
   }

   public ActivityMesg(final Mesg mesg) {
      super(mesg);
   }
   
   /**
    * Get timestamp field
    *
    * @return timestamp
    */
   public DateTime getTimestamp() {
      return timestampToDateTime(getFieldLongValue(253));
   }

   /**
    * Set timestamp field
    *
    * @param timestamp
    */
   public void setTimestamp(DateTime timestamp) {
      setFieldValue("timestamp", timestamp.getTimestamp());
   }   
   /**
    * Get total_timer_time field
    * Units: s
    * Comment: Exclude pauses
    *
    * @return total_timer_time
    */
   public Float getTotalTimerTime() {
      return getFieldFloatValue(0);
   }

   /**
    * Set total_timer_time field
    * Units: s
    * Comment: Exclude pauses
    *
    * @param totalTimerTime
    */
   public void setTotalTimerTime(Float totalTimerTime) {
      setFieldValue("total_timer_time", totalTimerTime);
   }   
   /**
    * Get num_sessions field
    *
    * @return num_sessions
    */
   public Integer getNumSessions() {
      return getFieldIntegerValue(1);
   }

   /**
    * Set num_sessions field
    *
    * @param numSessions
    */
   public void setNumSessions(Integer numSessions) {
      setFieldValue("num_sessions", numSessions);
   }   
   /**
    * Get type field
    *
    * @return type
    */
   public Activity getType() {
      Short value = getFieldShortValue(2);
     if (value == null)
        return null;
      return Activity.getByValue(value);
   }

   /**
    * Set type field
    *
    * @param type
    */
   public void setType(Activity type) {
      setFieldValue("type", type.value);
   }   
   /**
    * Get event field
    *
    * @return event
    */
   public Event getEvent() {
      Short value = getFieldShortValue(3);
     if (value == null)
        return null;
      return Event.getByValue(value);
   }

   /**
    * Set event field
    *
    * @param event
    */
   public void setEvent(Event event) {
      setFieldValue("event", event.value);
   }   
   /**
    * Get event_type field
    *
    * @return event_type
    */
   public EventType getEventType() {
      Short value = getFieldShortValue(4);
     if (value == null)
        return null;
      return EventType.getByValue(value);
   }

   /**
    * Set event_type field
    *
    * @param eventType
    */
   public void setEventType(EventType eventType) {
      setFieldValue("event_type", eventType.value);
   }   
   /**
    * Get local_timestamp field
    * Comment: Use to convert activity timestamps to local time if device does not support time zone and daylight savings time correction.
    *
    * @return local_timestamp
    */
   public DateTime getLocalTimestamp() {
      return timestampToDateTime(getFieldLongValue(5));
   }

   /**
    * Set local_timestamp field
    * Comment: Use to convert activity timestamps to local time if device does not support time zone and daylight savings time correction.
    *
    * @param localTimestamp
    */
   public void setLocalTimestamp(DateTime localTimestamp) {
      setFieldValue("local_timestamp", localTimestamp.getTimestamp());
   }   
   /**
    * Get event_group field
    *
    * @return event_group
    */
   public Short getEventGroup() {
      return getFieldShortValue(6);
   }

   /**
    * Set event_group field
    *
    * @param eventGroup
    */
   public void setEventGroup(Short eventGroup) {
      setFieldValue("event_group", eventGroup);
   }

}
