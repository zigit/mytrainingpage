////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.0Release
// Tag = $Name: AKW1_000 $
////////////////////////////////////////////////////////////////////////////////


#include "fit_profile.hpp"

namespace fit
{

static const Profile::FIELD fileIdFields[] =
{
   { 0, "type", "", 1, 0, 0, 0, 0 },
   { 0, "manufacturer", "", 1, 0, 0, 1, 132 },
   { 0, "product", "", 1, 0, 0, 2, 132 },
   { 0, "serial_number", "", 1, 0, 0, 3, 140 },
   { 0, "time_created", "", 1, 0, 0, 4, 134 },
   { 0, "number", "", 1, 0, 0, 5, 132 },
};

static const Profile::FIELD fileCreatorFields[] =
{
   { 0, "software_version", "", 1, 0, 0, 0, 132 },
   { 0, "hardware_version", "", 1, 0, 0, 1, 2 },
};

static const Profile::FIELD softwareFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "version", "", 100, 0, 0, 3, 132 },
   { 0, "part_number", "", 1, 0, 0, 5, 7 },
};

static const Profile::FIELD capabilitiesFields[] =
{
   { 0, "workouts_supported", "", 1, 0, 0, 21, 140 },
};

static const Profile::FIELD fileCapabilitiesFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "type", "", 1, 0, 0, 0, 0 },
   { 0, "flags", "", 1, 0, 0, 1, 10 },
   { 0, "directory", "", 1, 0, 0, 2, 7 },
   { 0, "max_count", "", 1, 0, 0, 3, 132 },
   { 0, "max_size", "bytes", 1, 0, 0, 4, 134 },
};

static const Profile::FIELD mesgCapabilitiesFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "file", "", 1, 0, 0, 0, 0 },
   { 0, "mesg_num", "", 1, 0, 0, 1, 132 },
   { 0, "count_type", "", 1, 0, 0, 2, 0 },
   { 0, "count", "", 1, 0, 0, 3, 132 },
};

static const Profile::FIELD fieldCapabilitiesFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "file", "", 1, 0, 0, 0, 0 },
   { 0, "mesg_num", "", 1, 0, 0, 1, 132 },
   { 0, "field_num", "", 1, 0, 0, 2, 2 },
   { 0, "count", "", 1, 0, 0, 3, 132 },
};

static const Profile::FIELD deviceSettingsFields[] =
{
   { 0, "utc_offset", "", 1, 0, 0, 1, 134 },
};

static const Profile::FIELD userProfileFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "friendly_name", "", 1, 0, 0, 0, 7 },
   { 0, "gender", "", 1, 0, 0, 1, 0 },
   { 0, "age", "years", 1, 0, 0, 2, 2 },
   { 0, "height", "m", 100, 0, 0, 3, 2 },
   { 0, "weight", "kg", 10, 0, 0, 4, 132 },
   { 0, "language", "", 1, 0, 0, 5, 0 },
   { 0, "elev_setting", "", 1, 0, 0, 6, 0 },
   { 0, "weight_setting", "", 1, 0, 0, 7, 0 },
   { 0, "resting_heart_rate", "bpm", 1, 0, 0, 8, 2 },
   { 0, "default_max_running_heart_rate", "bpm", 1, 0, 0, 9, 2 },
   { 0, "default_max_biking_heart_rate", "bpm", 1, 0, 0, 10, 2 },
   { 0, "default_max_heart_rate", "bpm", 1, 0, 0, 11, 2 },
   { 0, "hr_setting", "", 1, 0, 0, 12, 0 },
   { 0, "speed_setting", "", 1, 0, 0, 13, 0 },
   { 0, "dist_setting", "", 1, 0, 0, 14, 0 },
   { 0, "power_setting", "", 1, 0, 0, 16, 0 },
   { 0, "activity_class", "", 1, 0, 0, 17, 0 },
   { 0, "position_setting", "", 1, 0, 0, 18, 0 },
   { 0, "temperature_setting", "", 1, 0, 0, 21, 0 },
   { 0, "local_id", "", 1, 0, 0, 22, 132 },
   { 0, "global_id", "", 1, 0, 0, 23, 13 },
};

static const Profile::FIELD hrmProfileFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "enabled", "", 1, 0, 0, 0, 0 },
   { 0, "hrm_ant_id", "", 1, 0, 0, 1, 139 },
};

static const Profile::FIELD zonesTargetFields[] =
{
   { 0, "max_heart_rate", "", 1, 0, 0, 1, 2 },
   { 0, "threshold_heart_rate", "", 1, 0, 0, 2, 2 },
   { 0, "functional_threshold_power", "", 1, 0, 0, 3, 132 },
   { 0, "hr_calc_type", "", 1, 0, 0, 5, 0 },
   { 0, "pwr_calc_type", "", 1, 0, 0, 7, 0 },
};

static const Profile::FIELD sportFields[] =
{
   { 0, "sport", "", 1, 0, 0, 0, 0 },
   { 0, "sub_sport", "", 1, 0, 0, 1, 0 },
   { 0, "name", "", 1, 0, 0, 3, 7 },
};

static const Profile::FIELD hrZoneFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "high_bpm", "bpm", 1, 0, 0, 1, 2 },
   { 0, "name", "", 1, 0, 0, 2, 7 },
};

static const Profile::FIELD powerZoneFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "high_value", "watts", 1, 0, 0, 1, 132 },
   { 0, "name", "", 1, 0, 0, 2, 7 },
};

static const Profile::FIELD metZoneFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "high_bpm", "", 1, 0, 0, 1, 2 },
   { 0, "calories", "kcal / min", 10, 0, 0, 2, 132 },
   { 0, "fat_calories", "kcal / min", 10, 0, 0, 3, 2 },
};

static const Profile::FIELD trainingGoalsFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "sport", "", 1, 0, 0, 0, 0 },
   { 0, "sub_sport", "", 1, 0, 0, 1, 0 },
   { 0, "start_date", "", 1, 0, 0, 2, 134 },
   { 0, "end_date", "", 1, 0, 0, 3, 134 },
   { 0, "type", "", 1, 0, 0, 4, 0 },
   { 0, "value", "", 1, 0, 0, 5, 134 },
   { 0, "repeat", "", 1, 0, 0, 6, 0 },
   { 0, "target_value", "", 1, 0, 0, 7, 134 },
   { 0, "recurrence", "", 1, 0, 0, 8, 0 },
   { 0, "recurrence_value", "", 1, 0, 0, 9, 132 },
   { 0, "enabled", "", 1, 0, 0, 10, 0 },
};

static const Profile::FIELD activityFields[] =
{
   { 0, "timestamp", "", 1, 0, 0, 253, 134 },
   { 0, "total_timer_time", "s", 1000, 0, 0, 0, 134 },
   { 0, "num_sessions", "", 1, 0, 0, 1, 132 },
   { 0, "type", "", 1, 0, 0, 2, 0 },
   { 0, "event", "", 1, 0, 0, 3, 0 },
   { 0, "event_type", "", 1, 0, 0, 4, 0 },
   { 0, "local_timestamp", "", 1, 0, 0, 5, 134 },
   { 0, "event_group", "", 1, 0, 0, 6, 2 },
};

static const Profile::FIELD sessionFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "event", "", 1, 0, 0, 0, 0 },
   { 0, "event_type", "", 1, 0, 0, 1, 0 },
   { 0, "start_time", "", 1, 0, 0, 2, 134 },
   { 0, "start_position_lat", "semicircles", 1, 0, 0, 3, 133 },
   { 0, "start_position_long", "semicircles", 1, 0, 0, 4, 133 },
   { 0, "sport", "", 1, 0, 0, 5, 0 },
   { 0, "sub_sport", "", 1, 0, 0, 6, 0 },
   { 0, "total_elapsed_time", "s", 1000, 0, 0, 7, 134 },
   { 0, "total_timer_time", "s", 1000, 0, 0, 8, 134 },
   { 0, "total_distance", "m", 100, 0, 0, 9, 134 },
   { 0, "total_cycles", "cycles", 1, 0, 0, 10, 134 },
   { 0, "total_calories", "kcal", 1, 0, 0, 11, 132 },
   { 0, "total_fat_calories", "kcal", 1, 0, 0, 13, 132 },
   { 0, "avg_speed", "m/s", 1000, 0, 0, 14, 132 },
   { 0, "max_speed", "m/s", 1000, 0, 0, 15, 132 },
   { 0, "avg_heart_rate", "bpm", 1, 0, 0, 16, 2 },
   { 0, "max_heart_rate", "bpm", 1, 0, 0, 17, 2 },
   { 0, "avg_cadence", "rpm", 1, 0, 0, 18, 2 },
   { 0, "max_cadence", "rpm", 1, 0, 0, 19, 2 },
   { 0, "avg_power", "watts", 1, 0, 0, 20, 132 },
   { 0, "max_power", "watts", 1, 0, 0, 21, 132 },
   { 0, "total_ascent", "m", 1, 0, 0, 22, 132 },
   { 0, "total_descent", "m", 1, 0, 0, 23, 132 },
   { 0, "total_training_effect", "", 1, 0, 0, 24, 2 },
   { 0, "first_lap_index", "", 1, 0, 0, 25, 132 },
   { 0, "num_laps", "", 1, 0, 0, 26, 132 },
   { 0, "event_group", "", 1, 0, 0, 27, 2 },
   { 0, "trigger", "", 1, 0, 0, 28, 0 },
   { 0, "nec_lat", "semicircles", 1, 0, 0, 29, 133 },
   { 0, "nec_long", "semicircles", 1, 0, 0, 30, 133 },
   { 0, "swc_lat", "semicircles", 1, 0, 0, 31, 133 },
   { 0, "swc_long", "semicircles", 1, 0, 0, 32, 133 },
};

static const Profile::FIELD lapFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "event", "", 1, 0, 0, 0, 0 },
   { 0, "event_type", "", 1, 0, 0, 1, 0 },
   { 0, "start_time", "", 1, 0, 0, 2, 134 },
   { 0, "start_position_lat", "semicircles", 1, 0, 0, 3, 133 },
   { 0, "start_position_long", "semicircles", 1, 0, 0, 4, 133 },
   { 0, "end_position_lat", "semicircles", 1, 0, 0, 5, 133 },
   { 0, "end_position_long", "semicircles", 1, 0, 0, 6, 133 },
   { 0, "total_elapsed_time", "s", 1000, 0, 0, 7, 134 },
   { 0, "total_timer_time", "s", 1000, 0, 0, 8, 134 },
   { 0, "total_distance", "m", 100, 0, 0, 9, 134 },
   { 0, "total_cycles", "cycles", 1, 0, 0, 10, 134 },
   { 0, "total_calories", "kcal", 1, 0, 0, 11, 132 },
   { 0, "total_fat_calories", "kcal", 1, 0, 0, 12, 132 },
   { 0, "avg_speed", "m/s", 1000, 0, 0, 13, 132 },
   { 0, "max_speed", "m/s", 1000, 0, 0, 14, 132 },
   { 0, "avg_heart_rate", "bpm", 1, 0, 0, 15, 2 },
   { 0, "max_heart_rate", "bpm", 1, 0, 0, 16, 2 },
   { 0, "avg_cadence", "rpm", 1, 0, 0, 17, 2 },
   { 0, "max_cadence", "rpm", 1, 0, 0, 18, 2 },
   { 0, "avg_power", "watts", 1, 0, 0, 19, 132 },
   { 0, "max_power", "watts", 1, 0, 0, 20, 132 },
   { 0, "total_ascent", "m", 1, 0, 0, 21, 132 },
   { 0, "total_descent", "m", 1, 0, 0, 22, 132 },
   { 0, "intensity", "", 1, 0, 0, 23, 0 },
   { 0, "lap_trigger", "", 1, 0, 0, 24, 0 },
   { 0, "sport", "", 1, 0, 0, 25, 0 },
   { 0, "event_group", "", 1, 0, 0, 26, 2 },
};
static const Profile::FIELD_COMPONENT recordCompressedSpeedDistanceComponents[] =
{
   { 100, 0, 6, 12, FIT_FALSE }, // speed
   { 16, 0, 5, 12, FIT_TRUE }, // distance
};

static const Profile::FIELD recordFields[] =
{
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "position_lat", "semicircles", 1, 0, 0, 0, 133 },
   { 0, "position_long", "semicircles", 1, 0, 0, 1, 133 },
   { 0, "altitude", "m", 5, 500, 0, 2, 132 },
   { 0, "heart_rate", "bpm", 1, 0, 0, 3, 2 },
   { 0, "cadence", "rpm", 1, 0, 0, 4, 2 },
   { 0, "distance", "m", 100, 0, 0, 5, 134 },
   { 0, "speed", "m/s", 1000, 0, 0, 6, 132 },
   { 0, "power", "watts", 1, 0, 0, 7, 132 },
   { recordCompressedSpeedDistanceComponents, "compressed_speed_distance", "", 1, 0, 2, 8, 13 },
   { 0, "grade", "%", 100, 0, 0, 9, 131 },
   { 0, "resistance", "", 1, 0, 0, 10, 2 },
   { 0, "time_from_course", "s", 1000, 0, 0, 11, 133 },
   { 0, "cycle_length", "m", 100, 0, 0, 12, 2 },
   { 0, "temperature", "°C", 1, 0, 0, 13, 1 },
};
static const Profile::FIELD_COMPONENT eventData16Components[] =
{
   { 1, 0, 3, 16, FIT_FALSE }, // data
};

static const Profile::FIELD eventFields[] =
{
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "event", "", 1, 0, 0, 0, 0 },
   { 0, "event_type", "", 1, 0, 0, 1, 0 },
   { eventData16Components, "data16", "", 1, 0, 1, 2, 132 },
   { 0, "data", "", 1, 0, 0, 3, 134 },
   { 0, "event_group", "", 1, 0, 0, 4, 2 },
};

static const Profile::FIELD deviceInfoFields[] =
{
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "device_index", "", 1, 0, 0, 0, 2 },
   { 0, "device_type", "", 1, 0, 0, 1, 2 },
   { 0, "manufacturer", "", 1, 0, 0, 2, 132 },
   { 0, "serial_number", "", 1, 0, 0, 3, 140 },
   { 0, "product", "", 1, 0, 0, 4, 132 },
   { 0, "software_version", "", 100, 0, 0, 5, 132 },
   { 0, "hardware_version", "", 1, 0, 0, 6, 2 },
   { 0, "cum_operating_time", "s", 1, 0, 0, 7, 134 },
   { 0, "battery_voltage", "V", 256, 0, 0, 10, 132 },
   { 0, "battery_status", "", 1, 0, 0, 11, 2 },
};

static const Profile::FIELD workoutFields[] =
{
   { 0, "sport", "", 1, 0, 0, 4, 0 },
   { 0, "capabilities", "", 1, 0, 0, 5, 140 },
   { 0, "num_valid_steps", "", 1, 0, 0, 6, 132 },
   { 0, "wkt_name", "", 1, 0, 0, 8, 7 },
};

static const Profile::FIELD workoutStepFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "wkt_step_name", "", 1, 0, 0, 0, 7 },
   { 0, "duration_type", "", 1, 0, 0, 1, 0 },
   { 0, "duration_value", "", 1, 0, 0, 2, 134 },
   { 0, "target_type", "", 1, 0, 0, 3, 0 },
   { 0, "target_value", "", 1, 0, 0, 4, 134 },
   { 0, "custom_target_value_low", "", 1, 0, 0, 5, 134 },
   { 0, "custom_target_value_high", "", 1, 0, 0, 6, 134 },
   { 0, "intensity", "", 1, 0, 0, 7, 0 },
};

static const Profile::FIELD totalsFields[] =
{
   { 0, "message_index", "", 1, 0, 0, 254, 132 },
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "timer_time", "s", 1, 0, 0, 0, 134 },
   { 0, "distance", "m", 1, 0, 0, 1, 134 },
   { 0, "calories", "kcal", 1, 0, 0, 2, 134 },
   { 0, "sport", "", 1, 0, 0, 3, 0 },
};

static const Profile::FIELD weightScaleFields[] =
{
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "weight", "kg", 100, 0, 0, 0, 132 },
   { 0, "percent_fat", "%", 100, 0, 0, 1, 132 },
   { 0, "percent_hydration", "%", 100, 0, 0, 2, 132 },
   { 0, "visceral_fat_mass", "kg", 100, 0, 0, 3, 132 },
   { 0, "bone_mass", "kg", 100, 0, 0, 4, 132 },
   { 0, "muscle_mass", "kg", 100, 0, 0, 5, 132 },
   { 0, "basal_met", "kcal/day", 4, 0, 0, 7, 132 },
   { 0, "physique_rating", "", 1, 0, 0, 8, 2 },
   { 0, "active_met", "kcal/day", 4, 0, 0, 9, 132 },
   { 0, "metabolic_age", "years", 1, 0, 0, 10, 2 },
   { 0, "visceral_fat_rating", "", 1, 0, 0, 11, 2 },
   { 0, "user_profile_index", "", 1, 0, 0, 12, 132 },
};

static const Profile::FIELD bloodPressureFields[] =
{
   { 0, "timestamp", "s", 1, 0, 0, 253, 134 },
   { 0, "systolic_pressure", "mmHg", 1, 0, 0, 0, 132 },
   { 0, "diastolic_pressure", "mmHg", 1, 0, 0, 1, 132 },
   { 0, "mean_arterial_pressure", "mmHg", 1, 0, 0, 2, 132 },
   { 0, "map_3_sample_mean", "mmHg", 1, 0, 0, 3, 132 },
   { 0, "map_morning_values", "mmHg", 1, 0, 0, 4, 132 },
   { 0, "map_evening_values", "mmHg", 1, 0, 0, 5, 132 },
   { 0, "heart_rate", "bpm", 1, 0, 0, 6, 2 },
   { 0, "heart_rate_type", "", 1, 0, 0, 7, 0 },
   { 0, "status", "", 1, 0, 0, 8, 0 },
   { 0, "user_profile_index", "", 1, 0, 0, 9, 132 },
};
    
const Profile::MESG Profile::mesgs[MESGS] =
{
   { fileIdFields, "file_id", FIT_MESG_NUM_FILE_ID, 6 },
   { fileCreatorFields, "file_creator", FIT_MESG_NUM_FILE_CREATOR, 2 },
   { softwareFields, "software", FIT_MESG_NUM_SOFTWARE, 3 },
   { capabilitiesFields, "capabilities", FIT_MESG_NUM_CAPABILITIES, 1 },
   { fileCapabilitiesFields, "file_capabilities", FIT_MESG_NUM_FILE_CAPABILITIES, 6 },
   { mesgCapabilitiesFields, "mesg_capabilities", FIT_MESG_NUM_MESG_CAPABILITIES, 5 },
   { fieldCapabilitiesFields, "field_capabilities", FIT_MESG_NUM_FIELD_CAPABILITIES, 5 },
   { deviceSettingsFields, "device_settings", FIT_MESG_NUM_DEVICE_SETTINGS, 1 },
   { userProfileFields, "user_profile", FIT_MESG_NUM_USER_PROFILE, 22 },
   { hrmProfileFields, "hrm_profile", FIT_MESG_NUM_HRM_PROFILE, 3 },
   { zonesTargetFields, "zones_target", FIT_MESG_NUM_ZONES_TARGET, 5 },
   { sportFields, "sport", FIT_MESG_NUM_SPORT, 3 },
   { hrZoneFields, "hr_zone", FIT_MESG_NUM_HR_ZONE, 3 },
   { powerZoneFields, "power_zone", FIT_MESG_NUM_POWER_ZONE, 3 },
   { metZoneFields, "met_zone", FIT_MESG_NUM_MET_ZONE, 4 },
   { trainingGoalsFields, "training_goals", FIT_MESG_NUM_TRAINING_GOALS, 12 },
   { activityFields, "activity", FIT_MESG_NUM_ACTIVITY, 8 },
   { sessionFields, "session", FIT_MESG_NUM_SESSION, 34 },
   { lapFields, "lap", FIT_MESG_NUM_LAP, 29 },
   { recordFields, "record", FIT_MESG_NUM_RECORD, 15 },
   { eventFields, "event", FIT_MESG_NUM_EVENT, 6 },
   { deviceInfoFields, "device_info", FIT_MESG_NUM_DEVICE_INFO, 11 },
   { workoutFields, "workout", FIT_MESG_NUM_WORKOUT, 4 },
   { workoutStepFields, "workout_step", FIT_MESG_NUM_WORKOUT_STEP, 9 },
   { totalsFields, "totals", FIT_MESG_NUM_TOTALS, 6 },
   { weightScaleFields, "weight_scale", FIT_MESG_NUM_WEIGHT_SCALE, 13 },
   { bloodPressureFields, "blood_pressure", FIT_MESG_NUM_BLOOD_PRESSURE, 11 },
};

const Profile::MESG* Profile::GetMesg(FIT_UINT16 num)
{
   for (int i = 0; i < MESGS; i++)
   {
      if (mesgs[i].num == num)
         return &mesgs[i];
   }
   return NULL;
}

const Profile::MESG* Profile::GetMesg(string name)
{
   for (int i = 0; i < MESGS; i++)
   {
      if (mesgs[i].name == name)
         return &mesgs[i];
   }
   return NULL;
}

const FIT_UINT16 Profile::GetFieldIndex(FIT_UINT16 mesgNum, FIT_UINT8 fieldNum)
{
   const MESG *mesg = GetMesg(mesgNum);
   if (mesg == NULL)
      return FIT_UINT16_INVALID;
   for (FIT_UINT16 i = 0; i < mesg->numFields; i++)
   {
      if (mesg->fields[i].num == fieldNum)
         return i;
   }
   return FIT_UINT16_INVALID;
}

const FIT_UINT16 Profile::GetFieldIndex(string mesgName, string fieldName)
{
   const MESG *mesg = GetMesg(mesgName);
   if (mesg == NULL)
      return FIT_UINT16_INVALID;
   for (FIT_UINT16 i = 0; i < mesg->numFields; i++)
   {
      if (mesg->fields[i].name == fieldName)
         return i;
   }
   return FIT_UINT16_INVALID;
}

const Profile::FIELD* Profile::GetField(FIT_UINT16 mesgNum, FIT_UINT8 fieldNum)
{
   return &mesgs->fields[GetFieldIndex(mesgNum, fieldNum)];
}

const Profile::FIELD* Profile::GetField(string mesgName, string fieldName)
{
   return &mesgs->fields[GetFieldIndex(mesgName, fieldName)];
}

} // namespace fit

