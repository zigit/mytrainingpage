////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.0Release
// Tag = $Name: AKW1_000 $
////////////////////////////////////////////////////////////////////////////////


#if !defined(FIT_LAP_MESG_HPP)
#define FIT_LAP_MESG_HPP

#include "fit_mesg.hpp"
#include "fit_mesg_with_event.hpp"

namespace fit
{

class LapMesg : public Mesg, public MesgWithEvent
{
   public:
      LapMesg(void) : Mesg(Profile::MESG_LAP)
      {
      }

      LapMesg(const Mesg &mesg) : Mesg(mesg)
      {
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns message_index field
      ///////////////////////////////////////////////////////////////////////
      FIT_MESSAGE_INDEX GetMessageIndex(void)
      {
         return GetFieldUINT16Value(254);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set message_index field
      ///////////////////////////////////////////////////////////////////////
      void SetMessageIndex(FIT_MESSAGE_INDEX messageIndex)
      {
         SetFieldUINT16Value(254, messageIndex);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns timestamp field
      // Units: s
      // Comment: Lap end time.
      ///////////////////////////////////////////////////////////////////////
      FIT_DATE_TIME GetTimestamp(void)
      {
         return GetFieldUINT32Value(253);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set timestamp field
      // Units: s
      // Comment: Lap end time.
      ///////////////////////////////////////////////////////////////////////
      void SetTimestamp(FIT_DATE_TIME timestamp)
      {
         SetFieldUINT32Value(253, timestamp);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns event field
      ///////////////////////////////////////////////////////////////////////
      FIT_EVENT GetEvent(void)
      {
         return GetFieldENUMValue(0);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set event field
      ///////////////////////////////////////////////////////////////////////
      void SetEvent(FIT_EVENT event)
      {
         SetFieldENUMValue(0, event);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns event_type field
      ///////////////////////////////////////////////////////////////////////
      FIT_EVENT_TYPE GetEventType(void)
      {
         return GetFieldENUMValue(1);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set event_type field
      ///////////////////////////////////////////////////////////////////////
      void SetEventType(FIT_EVENT_TYPE eventType)
      {
         SetFieldENUMValue(1, eventType);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns start_time field
      ///////////////////////////////////////////////////////////////////////
      FIT_DATE_TIME GetStartTime(void)
      {
         return GetFieldUINT32Value(2);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set start_time field
      ///////////////////////////////////////////////////////////////////////
      void SetStartTime(FIT_DATE_TIME startTime)
      {
         SetFieldUINT32Value(2, startTime);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns start_position_lat field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      FIT_SINT32 GetStartPositionLat(void)
      {
         return GetFieldSINT32Value(3);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set start_position_lat field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      void SetStartPositionLat(FIT_SINT32 startPositionLat)
      {
         SetFieldSINT32Value(3, startPositionLat);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns start_position_long field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      FIT_SINT32 GetStartPositionLong(void)
      {
         return GetFieldSINT32Value(4);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set start_position_long field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      void SetStartPositionLong(FIT_SINT32 startPositionLong)
      {
         SetFieldSINT32Value(4, startPositionLong);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns end_position_lat field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      FIT_SINT32 GetEndPositionLat(void)
      {
         return GetFieldSINT32Value(5);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set end_position_lat field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      void SetEndPositionLat(FIT_SINT32 endPositionLat)
      {
         SetFieldSINT32Value(5, endPositionLat);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns end_position_long field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      FIT_SINT32 GetEndPositionLong(void)
      {
         return GetFieldSINT32Value(6);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set end_position_long field
      // Units: semicircles
      ///////////////////////////////////////////////////////////////////////
      void SetEndPositionLong(FIT_SINT32 endPositionLong)
      {
         SetFieldSINT32Value(6, endPositionLong);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_elapsed_time field
      // Units: s
      // Comment: Time (includes pauses)
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetTotalElapsedTime(void)
      {
         return GetFieldFLOAT32Value(7);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_elapsed_time field
      // Units: s
      // Comment: Time (includes pauses)
      ///////////////////////////////////////////////////////////////////////
      void SetTotalElapsedTime(FIT_FLOAT32 totalElapsedTime)
      {
         SetFieldFLOAT32Value(7, totalElapsedTime);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_timer_time field
      // Units: s
      // Comment: Timer Time (excludes pauses)
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetTotalTimerTime(void)
      {
         return GetFieldFLOAT32Value(8);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_timer_time field
      // Units: s
      // Comment: Timer Time (excludes pauses)
      ///////////////////////////////////////////////////////////////////////
      void SetTotalTimerTime(FIT_FLOAT32 totalTimerTime)
      {
         SetFieldFLOAT32Value(8, totalTimerTime);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_distance field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetTotalDistance(void)
      {
         return GetFieldFLOAT32Value(9);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_distance field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      void SetTotalDistance(FIT_FLOAT32 totalDistance)
      {
         SetFieldFLOAT32Value(9, totalDistance);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_cycles field
      // Units: cycles
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT32 GetTotalCycles(void)
      {
         return GetFieldUINT32Value(10);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_cycles field
      // Units: cycles
      ///////////////////////////////////////////////////////////////////////
      void SetTotalCycles(FIT_UINT32 totalCycles)
      {
         SetFieldUINT32Value(10, totalCycles);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_calories field
      // Units: kcal
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetTotalCalories(void)
      {
         return GetFieldUINT16Value(11);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_calories field
      // Units: kcal
      ///////////////////////////////////////////////////////////////////////
      void SetTotalCalories(FIT_UINT16 totalCalories)
      {
         SetFieldUINT16Value(11, totalCalories);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_fat_calories field
      // Units: kcal
      // Comment: If New Leaf
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetTotalFatCalories(void)
      {
         return GetFieldUINT16Value(12);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_fat_calories field
      // Units: kcal
      // Comment: If New Leaf
      ///////////////////////////////////////////////////////////////////////
      void SetTotalFatCalories(FIT_UINT16 totalFatCalories)
      {
         SetFieldUINT16Value(12, totalFatCalories);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns avg_speed field
      // Units: m/s
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetAvgSpeed(void)
      {
         return GetFieldFLOAT32Value(13);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set avg_speed field
      // Units: m/s
      ///////////////////////////////////////////////////////////////////////
      void SetAvgSpeed(FIT_FLOAT32 avgSpeed)
      {
         SetFieldFLOAT32Value(13, avgSpeed);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns max_speed field
      // Units: m/s
      ///////////////////////////////////////////////////////////////////////
      FIT_FLOAT32 GetMaxSpeed(void)
      {
         return GetFieldFLOAT32Value(14);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set max_speed field
      // Units: m/s
      ///////////////////////////////////////////////////////////////////////
      void SetMaxSpeed(FIT_FLOAT32 maxSpeed)
      {
         SetFieldFLOAT32Value(14, maxSpeed);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns avg_heart_rate field
      // Units: bpm
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT8 GetAvgHeartRate(void)
      {
         return GetFieldUINT8Value(15);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set avg_heart_rate field
      // Units: bpm
      ///////////////////////////////////////////////////////////////////////
      void SetAvgHeartRate(FIT_UINT8 avgHeartRate)
      {
         SetFieldUINT8Value(15, avgHeartRate);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns max_heart_rate field
      // Units: bpm
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT8 GetMaxHeartRate(void)
      {
         return GetFieldUINT8Value(16);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set max_heart_rate field
      // Units: bpm
      ///////////////////////////////////////////////////////////////////////
      void SetMaxHeartRate(FIT_UINT8 maxHeartRate)
      {
         SetFieldUINT8Value(16, maxHeartRate);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns avg_cadence field
      // Units: rpm
      // Comment: total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT8 GetAvgCadence(void)
      {
         return GetFieldUINT8Value(17);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set avg_cadence field
      // Units: rpm
      // Comment: total_cycles / total_timer_time if non_zero_avg_cadence otherwise total_cycles / total_elapsed_time
      ///////////////////////////////////////////////////////////////////////
      void SetAvgCadence(FIT_UINT8 avgCadence)
      {
         SetFieldUINT8Value(17, avgCadence);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns max_cadence field
      // Units: rpm
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT8 GetMaxCadence(void)
      {
         return GetFieldUINT8Value(18);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set max_cadence field
      // Units: rpm
      ///////////////////////////////////////////////////////////////////////
      void SetMaxCadence(FIT_UINT8 maxCadence)
      {
         SetFieldUINT8Value(18, maxCadence);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns avg_power field
      // Units: watts
      // Comment: total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetAvgPower(void)
      {
         return GetFieldUINT16Value(19);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set avg_power field
      // Units: watts
      // Comment: total_power / total_timer_time if non_zero_avg_power otherwise total_power / total_elapsed_time
      ///////////////////////////////////////////////////////////////////////
      void SetAvgPower(FIT_UINT16 avgPower)
      {
         SetFieldUINT16Value(19, avgPower);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns max_power field
      // Units: watts
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetMaxPower(void)
      {
         return GetFieldUINT16Value(20);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set max_power field
      // Units: watts
      ///////////////////////////////////////////////////////////////////////
      void SetMaxPower(FIT_UINT16 maxPower)
      {
         SetFieldUINT16Value(20, maxPower);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_ascent field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetTotalAscent(void)
      {
         return GetFieldUINT16Value(21);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_ascent field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      void SetTotalAscent(FIT_UINT16 totalAscent)
      {
         SetFieldUINT16Value(21, totalAscent);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns total_descent field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT16 GetTotalDescent(void)
      {
         return GetFieldUINT16Value(22);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set total_descent field
      // Units: m
      ///////////////////////////////////////////////////////////////////////
      void SetTotalDescent(FIT_UINT16 totalDescent)
      {
         SetFieldUINT16Value(22, totalDescent);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns intensity field
      ///////////////////////////////////////////////////////////////////////
      FIT_INTENSITY GetIntensity(void)
      {
         return GetFieldENUMValue(23);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set intensity field
      ///////////////////////////////////////////////////////////////////////
      void SetIntensity(FIT_INTENSITY intensity)
      {
         SetFieldENUMValue(23, intensity);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns lap_trigger field
      ///////////////////////////////////////////////////////////////////////
      FIT_LAP_TRIGGER GetLapTrigger(void)
      {
         return GetFieldENUMValue(24);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set lap_trigger field
      ///////////////////////////////////////////////////////////////////////
      void SetLapTrigger(FIT_LAP_TRIGGER lapTrigger)
      {
         SetFieldENUMValue(24, lapTrigger);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns sport field
      ///////////////////////////////////////////////////////////////////////
      FIT_SPORT GetSport(void)
      {
         return GetFieldENUMValue(25);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set sport field
      ///////////////////////////////////////////////////////////////////////
      void SetSport(FIT_SPORT sport)
      {
         SetFieldENUMValue(25, sport);
      }

      ///////////////////////////////////////////////////////////////////////
      // Returns event_group field
      ///////////////////////////////////////////////////////////////////////
      FIT_UINT8 GetEventGroup(void)
      {
         return GetFieldUINT8Value(26);
      }

      ///////////////////////////////////////////////////////////////////////
      // Set event_group field
      ///////////////////////////////////////////////////////////////////////
      void SetEventGroup(FIT_UINT8 eventGroup)
      {
         SetFieldUINT8Value(26, eventGroup);
      }

};

} // namespace fit

#endif // !defined(FIT_LAP_MESG_HPP)
