////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.0Release
// Tag = $Name: AKW1_000 $
////////////////////////////////////////////////////////////////////////////////


#include "fit_mesg.hpp"
#include "fit_factory.hpp"

namespace fit
{

Mesg::Mesg()
{
   profile = NULL;
}

Mesg::Mesg(const Mesg &mesg)
{
   profile = mesg.profile;
   fields = mesg.fields;
}

Mesg::Mesg(Profile::MESG_INDEX index)
: profile(&Profile::mesgs[index])
{
}

Mesg::Mesg(string name)
: profile(Profile::GetMesg(name))
{
}

Mesg::Mesg(FIT_UINT16 num)
: profile(Profile::GetMesg(num))
{
}

FIT_BOOL Mesg::IsValid(void)
{
   return profile != NULL;
}

int Mesg::Write(ostream &file)
{
   FIT_UINT8 mesgSize = 1;

   file.put(0); // Message record header. Always local message number 0.

   for (FIT_UINT8 fieldIndex = 0; fieldIndex < fields.size(); fieldIndex++)
   {
      FIT_UINT8 fieldSize = fields[fieldIndex].Write(file);

      if (fieldSize == 0)
         return 0;

      mesgSize += fieldSize;
   }

   return mesgSize;
}

string Mesg::GetName()
{
   if (profile == NULL)
      return "unknown";
   
   return profile->name;
}

FIT_UINT16 Mesg::GetNum() const
{
   if (profile == NULL)
      return FIT_MESG_NUM_INVALID;

   return profile->num;
}

FIT_BOOL Mesg::HasField(int num)
{
   for (int i = 0; i < (int)fields.size(); i++)
   {
      if (fields[i].GetNum() == num)
      {
         return FIT_TRUE;
      }
   }

   return FIT_FALSE;
}

void Mesg::AddField(Field &field)
{
   fields.push_back(field);
}

Field* Mesg::AddField(FIT_UINT8 num)
{
   Field *field = GetField(num);

   if (field == FIT_NULL)
   {
      fields.push_back(Field(profile->num, num));
      field = &fields[fields.size()-1];
   }

   return field;
}
      
void Mesg::SetField(Field &field)
{
   for (int i = 0; i < (int)fields.size(); i++)
   {
      if (fields[i].GetNum() == field.GetNum())
      {
         fields[i] = field;
         return;
      }
   }

   fields.push_back(field);
}

int Mesg::GetNumFields() const
{
   return (int)fields.size();
}

Field* Mesg::GetFieldByIndex(FIT_UINT16 index)
{
   if (index < fields.size())
      return &fields[index];

   return FIT_NULL;
}

Field* Mesg::GetField(FIT_UINT8 num)
{
   for (int i = 0; i < (int)fields.size(); i++)
   {
      if (fields[i].GetNum() == num)
         return &fields[i];
   }

   return FIT_NULL;
}

Field* Mesg::GetField(string name)
{
   for (int i = 0; i < (int)fields.size(); i++)
   {
      if (fields[i].GetName().compare(name) == 0)
         return &fields[i];
   }

   return FIT_NULL;
}

FIT_UINT8 Mesg::GetFieldNumValues(FIT_UINT8 fieldNum)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return 0;

   return field->GetNumValues();
}      

FIT_ENUM Mesg::GetFieldENUMValue(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_ENUM_INVALID;

   return field->GetENUMValue(index);
}

FIT_BYTE Mesg::GetFieldBYTEValue(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_BYTE_INVALID;

   return field->GetBYTEValue(index);
}

FIT_SINT8 Mesg::GetFieldSINT8Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_SINT8_INVALID;

   return field->GetSINT8Value(index);
}

FIT_UINT8 Mesg::GetFieldUINT8Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_UINT8_INVALID;

   return field->GetUINT8Value(index);
}

FIT_UINT8Z Mesg::GetFieldUINT8ZValue(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_UINT8Z_INVALID;

   return field->GetUINT8ZValue(index);
}

FIT_SINT16 Mesg::GetFieldSINT16Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_SINT16_INVALID;

   return field->GetSINT16Value(index);
}

FIT_UINT16 Mesg::GetFieldUINT16Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_UINT16_INVALID;

   return field->GetUINT16Value(index);
}

FIT_UINT16Z Mesg::GetFieldUINT16ZValue(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_UINT16Z_INVALID;

   return field->GetUINT16ZValue(index);
}

FIT_SINT32 Mesg::GetFieldSINT32Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_SINT32_INVALID;

   return field->GetSINT32Value(index);
}

FIT_UINT32 Mesg::GetFieldUINT32Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_UINT32_INVALID;

   return field->GetUINT32Value(index);
}

FIT_UINT32Z Mesg::GetFieldUINT32ZValue(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_UINT32Z_INVALID;

   return field->GetUINT32ZValue(index);
}

FIT_FLOAT32 Mesg::GetFieldFLOAT32Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_FLOAT32_INVALID;

   return field->GetFLOAT32Value(index);
}

FIT_FLOAT64 Mesg::GetFieldFLOAT64Value(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_FLOAT64_INVALID;

   return field->GetFLOAT64Value(index);
}

string Mesg::GetFieldSTRINGValue(FIT_UINT8 fieldNum, FIT_UINT8 index)
{
   Field *field = GetField(fieldNum);

   if (field == FIT_NULL)
      return FIT_STRING_INVALID;

   return field->GetSTRINGValue(index);
}

void Mesg::SetFieldENUMValue(FIT_UINT8 fieldNum, FIT_ENUM value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetENUMValue(value, index);
}

void Mesg::SetFieldBYTEValue(FIT_UINT8 fieldNum, FIT_BYTE value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetBYTEValue(value, index);
}

void Mesg::SetFieldSINT8Value(FIT_UINT8 fieldNum, FIT_SINT8 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetSINT8Value(value, index);
}

void Mesg::SetFieldUINT8Value(FIT_UINT8 fieldNum, FIT_UINT8 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetUINT8Value(value, index);
}

void Mesg::SetFieldUINT8ZValue(FIT_UINT8 fieldNum, FIT_UINT8 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetUINT8ZValue(value, index);
}

void Mesg::SetFieldSINT16Value(FIT_UINT8 fieldNum, FIT_SINT16 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetSINT16Value(value, index);
}

void Mesg::SetFieldUINT16Value(FIT_UINT8 fieldNum, FIT_UINT16 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetUINT16Value(value, index);
}

void Mesg::SetFieldUINT16ZValue(FIT_UINT8 fieldNum, FIT_UINT16Z value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetUINT16ZValue(value, index);
}

void Mesg::SetFieldSINT32Value(FIT_UINT8 fieldNum, FIT_SINT32 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetSINT32Value(value, index);
}

void Mesg::SetFieldUINT32Value(FIT_UINT8 fieldNum, FIT_UINT32 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetUINT32Value(value, index);
}

void Mesg::SetFieldUINT32ZValue(FIT_UINT8 fieldNum, FIT_UINT32Z value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetUINT32ZValue(value, index);
}

void Mesg::SetFieldFLOAT32Value(FIT_UINT8 fieldNum, FIT_FLOAT32 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetFLOAT32Value(value, index);
}

void Mesg::SetFieldFLOAT64Value(FIT_UINT8 fieldNum, FIT_FLOAT64 value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetFLOAT64Value(value, index);
}

void Mesg::SetFieldSTRINGValue(FIT_UINT8 fieldNum, string value, FIT_UINT8 index)
{
   Field *field = AddField(fieldNum);

   if (field == FIT_NULL)
      return;

   return field->SetSTRINGValue(value, index);
}

} // namespace fit