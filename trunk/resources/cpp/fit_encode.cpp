////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.0Release
// Tag = $Name: AKW1_000 $
////////////////////////////////////////////////////////////////////////////////


#include "fit_encode.hpp"
#include "fit_crc.hpp"

namespace fit
{

Encode::Encode(void)
{
   dataSize = 0;
}

void Encode::Open(iostream &file)
{
   this->file = &file;
   WriteFileHeader();
}

void Encode::Write(Mesg& mesg)
{
   MesgDefinition mesgDefinition(mesg);

   if (!file)
      return;

   if (mesgDefinition != lastMesgDefinition)
   {
      dataSize += mesgDefinition.Write(*file);
   }

   lastMesgDefinition = mesgDefinition;
   dataSize += mesg.Write(*file);
}

FIT_BOOL Encode::Close(void)
{
   FIT_UINT32 fileBytesLeft = FIT_FILE_HDR_SIZE + dataSize;
   int crc = 0;

   if (!file)
      return FIT_FALSE;

   WriteFileHeader();

   file->seekg(0, ios::beg);

   while (fileBytesLeft > 0)
   {
      if (file->eof())
         return FIT_FALSE; // File smaller than expected.

      crc = CRC::Get16(crc, file->get());
      fileBytesLeft--;
   }
   
   file->seekp(0, ios::end);
   file->put(crc & 0xFF);
   file->put(crc >> 8);

   return FIT_TRUE;
}

void Encode::OnMesg(Mesg &mesg)
{
   Write(mesg);
}

void Encode::WriteFileHeader()
{
   if (!file)
      return;

   file->seekp(0, ios::beg);
   file->put(FIT_FILE_HDR_SIZE);
   file->put(FIT_PROTOCOL_VERSION);
   file->put(FIT_PROFILE_VERSION & 0xFF);
   file->put(FIT_PROFILE_VERSION >> 8);
   file->put((FIT_UINT8) (dataSize & 0xFF));
   file->put((FIT_UINT8) ((dataSize >> 8) & 0xFF));
   file->put((FIT_UINT8) ((dataSize >> 16) & 0xFF));
   file->put((FIT_UINT8) ((dataSize >> 24) & 0xFF));
   file->put('.');
   file->put('F');
   file->put('I');
   file->put('T');
}

} // namespace fit