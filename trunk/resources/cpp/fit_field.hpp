////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2008 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 1.0Release
// Tag = $Name: AKW1_000 $
////////////////////////////////////////////////////////////////////////////////


#if !defined(FIELD_HPP)
#define FIELD_HPP

#include <stdio.h>
#include <string>
#include <vector>
using namespace std;
#include "fit.hpp"
#include "fit_profile.hpp"

namespace fit
{

class Field
{
   public:
      Field(void);
      Field(const Field &field);
      Field(Profile::MESG_INDEX mesgIndex, FIT_UINT16 fieldIndex);
      Field(FIT_UINT16 mesgNum, FIT_UINT8 fieldNum);
      Field(string mesgName, string fieldName);
      FIT_BOOL IsValid(void);
      FIT_UINT16 GetIndex(void);
      string GetName(void);
      FIT_UINT8 GetNum(void) const;
      FIT_UINT8 GetType(void) const;
      FIT_BOOL IsSignedInteger(void);
      string GetUnits(void);
      FIT_FLOAT32 GetScale(void);
      FIT_FLOAT32 GetOffset(void);
      FIT_UINT8 GetNumComponents(void);
      const Profile::FIELD_COMPONENT* GetComponent(FIT_UINT8 component);
      FIT_UINT8 GetSize(void) const;
      FIT_UINT8 GetNumValues(void);
      FIT_UINT32 GetBitsValue(FIT_UINT16 offset, FIT_UINT8 bits);
      FIT_SINT32 GetBitsSignedValue(FIT_UINT16 offset, FIT_UINT8 bits);
      FIT_ENUM GetENUMValue(FIT_UINT8 index = 0);
      FIT_BYTE GetBYTEValue(FIT_UINT8 index = 0);
      FIT_SINT8 GetSINT8Value(FIT_UINT8 index = 0);
      FIT_UINT8 GetUINT8Value(FIT_UINT8 index = 0);
      FIT_UINT8Z GetUINT8ZValue(FIT_UINT8 index = 0);
      FIT_SINT16 GetSINT16Value(FIT_UINT8 index = 0);
      FIT_UINT16 GetUINT16Value(FIT_UINT8 index = 0);
      FIT_UINT16Z GetUINT16ZValue(FIT_UINT8 index = 0);
      FIT_SINT32 GetSINT32Value(FIT_UINT8 index = 0);
      FIT_UINT32 GetUINT32Value(FIT_UINT8 index = 0);
      FIT_UINT32Z GetUINT32ZValue(FIT_UINT8 index = 0);
      FIT_FLOAT32 GetFLOAT32Value(FIT_UINT8 index = 0);
      FIT_FLOAT64 GetFLOAT64Value(FIT_UINT8 index = 0);
      string GetSTRINGValue(FIT_UINT8 index = 0);
      void SetENUMValue(FIT_ENUM value, FIT_UINT8 index = 0);
      void SetBYTEValue(FIT_BYTE value, FIT_UINT8 index = 0);
      void SetSINT8Value(FIT_SINT8 value, FIT_UINT8 index = 0);
      void SetUINT8Value(FIT_UINT8 value, FIT_UINT8 index = 0);
      void SetUINT8ZValue(FIT_UINT8 value, FIT_UINT8 index = 0);
      void SetSINT16Value(FIT_SINT16 value, FIT_UINT8 index = 0);
      void SetUINT16Value(FIT_UINT16 value, FIT_UINT8 index = 0);
      void SetUINT16ZValue(FIT_UINT16Z value, FIT_UINT8 index = 0);
      void SetSINT32Value(FIT_SINT32 value, FIT_UINT8 index = 0);
      void SetUINT32Value(FIT_UINT32 value, FIT_UINT8 index = 0);
      void SetUINT32ZValue(FIT_UINT32Z value, FIT_UINT8 index = 0);
      void SetFLOAT32Value(FIT_FLOAT32 value, FIT_UINT8 index = 0);
      void SetFLOAT64Value(FIT_FLOAT64 value, FIT_UINT8 index = 0);
      void SetSTRINGValue(string value, FIT_UINT8 index = 0);
      FIT_BOOL Read(const void *data, FIT_UINT8 size);
      FIT_UINT8 Write(ostream &file);

   private:
      const Profile::MESG* profile;
      FIT_UINT16 profileIndex;
      vector<vector<FIT_BYTE>> values;
};

} // namespace fit

#endif // defined(FIELD_HPP)
